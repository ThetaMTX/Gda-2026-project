from fastapi import FastAPI, HTTPException
import subprocess
import json
import os

app = FastAPI()

PLAYLIST_FILE = "playlist.json"

#Load or create playlist
def load_playlist():
    if os.path.exists(PLAYLIST_FILE):
        with open(PLAYLIST_FILE, "r") as f:
            return json.load(f)
    return []

def save_playlist(playlist):
    with open(PLAYLIST_FILE, "w") as f:
        json.dump(playlist, f)

playlist = load_playlist()

@app.get("/status")
def get_status():
    #Check if VLC is running
    try:
        result = subprocess.run(["pgrep", "vlc"], capture_output=True, text=True)
        is_running = bool(result.stdout.strip())
    except Exception:
        is_running = False
    
    return {"status": "hehe" if is_running else "Not hehe", "playlist": playlist}

@app.post("/play")
def play_video(index: int = 0):
    if index >= len(playlist):
        raise HTTPException(status_code=400, detail="Invalid index")
    
    subprocess.run(["pkill", "vlc"])  # Stop current VLC instance
    subprocess.Popen(["vlc", "--fullscreen", playlist[index]])
    return {"message": "Playing", "file": playlist[index]}

@app.post("/add_video")
def add_video(file_path: str):
    playlist.append(file_path)
    save_playlist(playlist)
    return {"message": "Video added", "playlist": playlist}

@app.post("/set_playlist")
def set_playlist(new_playlist: list[str]):
    global playlist
    playlist = new_playlist
    save_playlist(playlist)
    return {"message": "Playlist updated", "playlist": playlist}

@app.post("/loop")
def loop_videos():
    subprocess.run(["pkill", "vlc"])  # Stop current VLC instance
    subprocess.Popen(["vlc", "--fullscreen", "--loop"] + playlist)
    return {"message": "Looping playlist"}
